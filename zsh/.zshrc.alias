

alias luamake=/home/digitaldive/lua-language-server/3rd/luamake/luamake
function current_branch() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || \
  ref=$(git rev-parse --short HEAD 2> /dev/null) || return
  echo ${ref#refs/heads/}
}
function current_repository() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || \
  ref=$(git rev-parse --short HEAD 2> /dev/null) || return
  echo $(git remote -v | cut -d':' -f 2)
}
export DOTFILES="~/.dotfiles"
export NVIMDIR="$DOTFILES/nvim/.config/nvim"
# these aliases take advantage of the previous function
alias ggpull='git pull origin $(current_branch)'
alias ggpur='git pull --rebase origin $(current_branch)'
alias ggpush='git push origin $(current_branch)'
alias ggpnp='git pull origin $(current_branch) && git push origin $(current_branch)'
alias gs="nvim  . -c 'G' -c 'call CloseAllBuffersButCurrent()'"
alias ll=" ls -la"
alias ggdev=" git checkout master && git branch -D develop && git fetch origin develop && git switch develop"

alias gconf='nvim ~/.dotfiles/git/.gitconfig'

alias -- -="cd -"
#Dot file bare git repo alias
alias config='/usr/bin/git --git-dir=$HOME/.cfg/ --work-tree=$HOME'

alias winstartup="$EDITOR /mnt/c/Users/Pedro/AppData/Roaming/Microsoft/Windows/Start\ Menu/Programs/Startup"
alias zshrc="cd ~/.dotfiles/zsh && $EDITOR "
alias zalias="$EDITOR ~/.dotfiles/zsh/.zshrc.alias"
alias zshralias="nvim ~/.dotfiles/zsh/.zshrc.alias"
alias zshplugins="$EDITOR ~/.dotfiles/zsh/.zsh-plugins.zsh"
alias vimkeys="$EDITOR ~/.dotfiles/nvim/.config/nvim/plugin/keymaps.vim"
alias initvim="cd $NVIMDIR && $EDITOR -S "
alias vimrc="$EDITOR ~/.dotfiles/vim/.vimrc +RestoreSession"
alias zshhistory="$EDITOR ~/.zsh_history"
alias vs_settings=" "
alias tmconf="$EDITOR ~/.dotfiles/tmux/.tmux.conf ~/.dotfiles/bin/.local/bin/tmux-sessionizer"
alias tsess="$EDITOR  ~/.dotfiles/tmux/.tmux.conf ~/.dotfiles/bin/.local/bin/tmux-sessionizer"
#Dirs ZSH alias
alias d='dirs -v | head -10'
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'

# galley aliases
alias tf='aws-vault exec galley -- terraform'
alias tfplan='aws-vault exec galley -- terraform plan -var-file="secrets.tfvars"'
alias tfapply='aws-vault exec galley -- terraform apply -var-file="secrets.tfvars"'
alias galleyvpn="sudo openvpn --config ~/.openvpn.confs/galley/aws_galleyMaster_config.ovpn --key ~/.openvpn.confs/galley/phorton.galleysolutions.com.key --cert ~/.openvpn.confs/galley/phorton.galleysolutions.com.crt"

alias awsconf='$EDITOR ~/.aws/config ~/.aws/credentials'
alias p10kupdate='git -C ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k pull'


# Put a space at the start of a command to make sure it doesn't get added to the history.
setopt histignorespace

alias forget=' my_remove_last_history_entry' # Added a space in 'my_remove_last_history_entry' so that zsh forgets the 'forget' command :).

# ZSH's history is different from bash,
# so here's my fucntion to remove
# https://unix.stackexchange.com/questions/236094/how-to-remove-the-last-command-or-current-command-for-bonus-from-zsh-history
my_remove_last_history_entry() {
    # This sub-function checks if the argument passed is a number.
    # Thanks to @yabt on stackoverflow for this :).
    is_int() ( return $(test "$@" -eq "$@" > /dev/null 2>&1); )

    # Set history file's location
    history_file="${HOME}/.zsh_history"
    history_temp_file="${history_file}.tmp"
    line_cout=$(wc -l $history_file)

    # Check if the user passed a number,
    # so we can delete x lines from history.
    lines_to_remove=1
    if [ $# -eq 0 ]; then
        # No arguments supplied, so set to one.
        lines_to_remove=1
    else
        # An argument passed. Check if it's a number.
        if $(is_int "${1}"); then
            lines_to_remove="$1"
        else
            echo "Unknown argument passed. Exiting..."
            return
        fi
    fi

    # Make the number negative, since head -n needs to be negative.
    lines_to_remove="-${lines_to_remove}"

    fc -W # write current shell's history to the history file.

    # Get the files contents minus the last entry(head -n -1 does that)
    #cat $history_file | head -n -1 &> $history_temp_file
    cat $history_file | head -n "${lines_to_remove}" &> $history_temp_file
    mv "$history_temp_file" "$history_file"

    fc -R # read history file.
}
# make parent directoris
alias mkdir='mkdir -pv'
# myip alias, which prints your current public IP address to the terminal
alias myip='curl http://ipecho.net/plain; echo'
# out linux distro
alias distro='cat /etc/*-release'
# git reset to head
alias git-reset-head="git reset 'HEAD@{1}'"

# copy previous out put to clipboard
alias co='echo `fc -e -` | clip.exe'
# alias colors='for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done'

# ripgrep hidden files to FZF
alias rgh='rg --files --hidden | fzf'
# go to root of git project
 alias groot='cd $(git rev-parse --show-cdup)'


# fshow - git commit browser
# sc() {
#   git log --graph --color=always \
#       --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
#   fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
#       --bind "ctrl-m:execute:
#                 (grep -o '[a-f0-9]\{7\}' | head -1 |
#                 xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
#                 {}
# FZF-EOF"
# }

logshow() {
    cat -n $1 | fzf --reverse --no-sort --tiebreak=index \
                    --bind "ctrl-m:execute:echo {} | grep -Eo "[0-9]+" | head -n 1 | xargs -Ireplace less -N +replaceg $1"
}
flog() {
	local g=(
		git log
		--graph
		--format='%C(auto)%h%d %s %C(white)%C(bold)%cr'
		--color=always
		"$@"
	)

	local fzf=(
		fzf
    --height 100%
		--ansi
		--reverse
		--tiebreak=index
		--no-sort
		--bind=ctrl-s:toggle-sort
		--preview 'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1; }; f {}'
	)
	$g | $fzf
}
gitshow ()
{
  git log --graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"  | \
   fzf --ansi --no-sort --reverse --tiebreak=index --preview \
   'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always $1 ; }; f {}' \
   --bind "alt-v:execute:$_viewGitLogLineUnfancy | nvim -" \
   --bind "alt-j:preview-down,alt-k:preview-up,ctrl-f:preview-page-down,ctrl-b:preview-page-up,q:abort,ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF" --preview-window=right:60%
}
alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"'
_gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
_viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always % | diff-so-fancy'"
_viewGitLogLineUnfancy="$_gitLogLineToHash | xargs -I % sh -c 'git show %'"
gls() {
    glNoGraph |
        fzf
            --no-sort --reverse --tiebreak=index --no-multi \
            --height 100% \
            --ansi --preview="$_viewGitLogLine" \
                --header "enter to view, alt-y to copy hash, alt-v to open in vim" \
                --bind "enter:execute:$_viewGitLogLine   | less -R" \
                --bind "alt-v:execute:$_viewGitLogLineUnfancy | nvim -" \
                --bind "alt-y:execute:$_gitLogLineToHash | xclip"
}
